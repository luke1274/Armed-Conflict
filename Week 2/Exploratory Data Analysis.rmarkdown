---
title: "Exploratory Data Analysis"
author: "Luke"
format: pdf
editor: visual
---



# Tables for Mortality Rates

Top 3 highest and lowest values of Average Infant Mortality (2000-2019) by countries per region



```{r}
library(ggplot2)
finaldata <- source("Armed Conflict/R/merge_datasets.R")$value


finaldata <- finaldata %>%
  mutate(Infant_Mortality_Rate = as.numeric(Infant_Mortality_Rate)) %>%
  filter(!is.na(Infant_Mortality_Rate))

# Group by region and country_name and find average Infant Mortality Rate
country_mortality_summary <- finaldata %>%
  group_by(region, country_name) %>%
  summarise(avg_infant_mortality = mean(Infant_Mortality_Rate, na.rm = TRUE)) %>%
  ungroup()

# top 5 countries with highest and lowest IMR / region
top_3_highest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_max(avg_infant_mortality, n = 3) %>%
  ungroup()

top_3_lowest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_min(avg_infant_mortality, n = 3) %>%
  ungroup()

# Combine the top highest and lowest into one table
top_3_combined <- bind_rows(
  top_3_highest %>% mutate(category = "Highest"),
  top_3_lowest %>% mutate(category = "Lowest")
)

# Split the combined table into separate tables per region
tables_per_region <- split(top_3_combined, top_3_combined$region)

# Print each table separately
lapply(names(tables_per_region), function(region_name) {
  cat("\nRegion:", region_name, "\n")
  print(tables_per_region[[region_name]])
})

```



Top 3 highest and lowest values of Average NeoNatal Mortality Rate (2000-2019) by countries per region



```{r}
finaldata <- source("Armed Conflict/R/merge_datasets.R")$value


finaldata <- finaldata %>%
  mutate(NeoNatal_Mortality_Rate = as.numeric(NeoNatal_Mortality_Rate)) %>%
  filter(!is.na(NeoNatal_Mortality_Rate))

# Group by region and country_name and find average Infant Mortality Rate
country_mortality_summary <- finaldata %>%
  group_by(region, country_name) %>%
  summarise(avg_infant_mortality = mean(NeoNatal_Mortality_Rate, na.rm = TRUE)) %>%
  ungroup()

# top 5 countries with highest and lowest IMR / region
top_3_highest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_max(avg_infant_mortality, n = 3) %>%
  ungroup()

top_3_lowest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_min(avg_infant_mortality, n = 3) %>%
  ungroup()

# Combine the top highest and lowest into one table
top_3_combined <- bind_rows(
  top_3_highest %>% mutate(category = "Highest"),
  top_3_lowest %>% mutate(category = "Lowest")
)

# Split the combined table into separate tables per region
tables_per_region <- split(top_3_combined, top_3_combined$region)

# Print each table separately
lapply(names(tables_per_region), function(region_name) {
  cat("\nRegion:", region_name, "\n")
  print(tables_per_region[[region_name]])
})
```



Top 3 highest and lowest values of Average Under5 Mortality Rate (2000-2019) by countries per region



```{r}
finaldata <- source("Armed Conflict/R/merge_datasets.R")$value


finaldata <- finaldata %>%
  mutate(Under5_Mortality_Rate = as.numeric(Under5_Mortality_Rate)) %>%
  filter(!is.na(Under5_Mortality_Rate))

# Group by region and country_name and find average Infant Mortality Rate
country_mortality_summary <- finaldata %>%
  group_by(region, country_name) %>%
  summarise(avg_infant_mortality = mean(Under5_Mortality_Rate, na.rm = TRUE)) %>%
  ungroup()

# top 5 countries with highest and lowest IMR / region
top_3_highest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_max(avg_infant_mortality, n = 3) %>%
  ungroup()

top_3_lowest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_min(avg_infant_mortality, n = 3) %>%
  ungroup()

# Combine the top highest and lowest into one table
top_3_combined <- bind_rows(
  top_3_highest %>% mutate(category = "Highest"),
  top_3_lowest %>% mutate(category = "Lowest")
)

# Split the combined table into separate tables per region
tables_per_region <- split(top_3_combined, top_3_combined$region)

# Print each table separately
lapply(names(tables_per_region), function(region_name) {
  cat("\nRegion:", region_name, "\n")
  print(tables_per_region[[region_name]])
})
```



Top 3 highest and lowest values of Average Maternal Mortality Rate (2000-2019) by countries per region



```{r}
finaldata <- source("Armed Conflict/R/merge_datasets.R")$value


finaldata <- finaldata %>%
  mutate(Maternal_Mortality_Rate = as.numeric(Maternal_Mortality_Rate)) %>%
  filter(!is.na(Maternal_Mortality_Rate))

# Group by region and country_name and find average Infant Mortality Rate
country_mortality_summary <- finaldata %>%
  group_by(region, country_name) %>%
  summarise(avg_infant_mortality = mean(Maternal_Mortality_Rate, na.rm = TRUE)) %>%
  ungroup()

# top 5 countries with highest and lowest IMR / region
top_3_highest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_max(avg_infant_mortality, n = 3) %>%
  ungroup()

top_3_lowest <- country_mortality_summary %>%
  group_by(region) %>%
  slice_min(avg_infant_mortality, n = 3) %>%
  ungroup()

# Combine the top highest and lowest into one table
top_3_combined <- bind_rows(
  top_3_highest %>% mutate(category = "Highest"),
  top_3_lowest %>% mutate(category = "Lowest")
)

# Split the combined table into separate tables per region
tables_per_region <- split(top_3_combined, top_3_combined$region)

# Print each table separately
lapply(names(tables_per_region), function(region_name) {
  cat("\nRegion:", region_name, "\n")
  print(tables_per_region[[region_name]])
})
```



# Graphs for 2000 and 2019

#### Average Infant Mortality Rate per Region in 2000 and 2019



```{r}
library(ggplot2)
library(dplyr)

# Ensure Infant_Mortality_Rate is numeric
finaldata <- finaldata %>%
  mutate(Infant_Mortality_Rate = as.numeric(Infant_Mortality_Rate))

# Filter data for year 2000 and 2019
data_2000 <- finaldata %>%
  filter(year == 2000) %>%
  group_by(region) %>%
  summarise(avg_infant_mortality = mean(Infant_Mortality_Rate, na.rm = TRUE))


# Plot for year 2000
ggplot(data_2000, aes(x = reorder(region, -avg_infant_mortality), y = avg_infant_mortality)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  theme_minimal() +
  labs(title = "Average Infant Mortality Rate per Region in 2000", 
       x = "Region", 
       y = "Average Infant Mortality Rate") +
  coord_flip()



```

```{r}
library(ggplot2)
library(dplyr)

finaldata <- finaldata %>%
  mutate(Infant_Mortality_Rate = as.numeric(Infant_Mortality_Rate))

data_2019 <- finaldata %>%
  filter(year == 2019) %>%
  group_by(region) %>%
  summarise(avg_infant_mortality = mean(Infant_Mortality_Rate, na.rm = TRUE))
# Plot for year 2019
ggplot(data_2019, aes(x = reorder(region, -avg_infant_mortality), y = avg_infant_mortality)) +
  geom_bar(stat = "identity", fill = "coral") +
  theme_minimal() +
  labs(title = "Average Infant Mortality Rate per Region in 2019", 
       x = "Region", 
       y = "Average Infant Mortality Rate") +
  coord_flip()
```



#### Instances of Conflict Per Region in 2000 and 2019



```{r}
library(ggplot2)
library(dplyr)

finaldata <- finaldata %>%
  mutate(conflict = as.numeric(conflict))


data_2000 <- finaldata %>%
  filter(year == 2000) %>%
  group_by(region) %>%
  summarise(Total_Conflict_Instances = sum(conflict, na.rm = TRUE))

ggplot(data_2000, aes(x = reorder(region, -Total_Conflict_Instances), y = Total_Conflict_Instances)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  theme_minimal() +
  labs(title = "Total Instances of Conflict per Region in 2000", 
       x = "Region", 
       y = "Total Instances of Conflict") +
  coord_flip()


```

```{r}
library(ggplot2)
library(dplyr)

finaldata <- finaldata %>%
  mutate(conflict = as.numeric(conflict))

data_2019 <- finaldata %>%
  filter(year == 2019) %>%
  group_by(region) %>%
  summarise(Total_Conflict_Instances = sum(conflict, na.rm = TRUE))


ggplot(data_2019, aes(x = reorder(region, -Total_Conflict_Instances), y = Total_Conflict_Instances)) +
  geom_bar(stat = "identity", fill = "coral") +
  theme_minimal() +
  labs(title = "Total Instances of Conflict per Region in 2019", 
       x = "Region", 
       y = "Total Instances of Conflict") +
  coord_flip()
```



#### Disasters Per Region in 2000 and 2019



```{r}
finaldata <- finaldata %>%
  mutate(disaster = as.numeric(sum(drought, earthquake)))

data_2000 <- finaldata %>%
  filter(year == 2000) %>%
  group_by(region) %>%
  summarise(Total_Disaster_Instances = sum(disaster, na.rm = TRUE))

ggplot(data_2000, aes(x = reorder(region, -Total_Disaster_Instances), y = Total_Disaster_Instances)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  theme_minimal() +
  labs(title = "Total Instances of Disasters per Region in 2019", 
       x = "Region", 
       y = "Total Instances of Disasters") +
  coord_flip()
```

```{r}
finaldata <- finaldata %>%
  mutate(disaster = as.numeric(sum(drought, earthquake)))

data_2019 <- finaldata %>%
  filter(year == 2019) %>%
  group_by(region) %>%
  summarise(Total_Disaster_Instances = sum(disaster, na.rm = TRUE))

ggplot(data_2019, aes(x = reorder(region, -Total_Disaster_Instances), y = Total_Disaster_Instances)) +
  geom_bar(stat = "identity", fill = "coral") +
  theme_minimal() +
  labs(title = "Total Instances of Disasters per Region in 2019", 
       x = "Region", 
       y = "Total Instances of Disasters") +
  coord_flip()
```



2000 - 2019 Mortality Rate by Region



```{r}
library(ggplot2)
library(dplyr)

# Ensure Infant_Mortality_Rate is numeric
finaldata <- finaldata %>%
  mutate(Infant_Mortality_Rate = as.numeric(Infant_Mortality_Rate))

# Filter data for years 2000 to 2019
filtered_data <- finaldata %>%
  filter(year >= 2000 & year <= 2019)

# Group by year and region, and calculate the average Infant Mortality Rate for each combination
avg_infant_mortality <- filtered_data %>%
  group_by(year, region) %>%
  summarise(avg_IMR = mean(Infant_Mortality_Rate, na.rm = TRUE)) %>%
  ungroup()

# Create the line plot with a line for each region
ggplot(avg_infant_mortality, aes(x = year, y = avg_IMR, color = region)) +
  geom_line(size = 1) +                # Create the lines
  labs(title = "Average Infant Mortality Rate (2000-2019) by Region",
       x = "Year", 
       y = "Average Infant Mortality Rate") +
  theme_minimal() +                     # Apply a minimal theme
  theme(legend.title = element_blank()) # Remove legend title

```

```{r}
library(ggplot2)
library(dplyr)

finaldata <- finaldata %>%
  mutate(Infant_Mortality_Rate = as.numeric(Infant_Mortality_Rate))

filtered_data <- finaldata %>%
  filter(year >= 2000 & year <= 2019 & region == "Sub-Saharan Africa")

scaling_factor <- 10  # Adjust this value based on your data

avg_infant_mortality_conflict <- filtered_data %>%
  group_by(year) %>%
  summarise(avg_IMR = mean(Infant_Mortality_Rate, na.rm = TRUE),
            conflict_count = sum(conflict, na.rm = TRUE),
            .groups = 'drop')

ggplot() +
  geom_line(data = avg_infant_mortality_conflict, aes(x = year, y = avg_IMR, color = "Infant Mortality Rate"), size = 1) + # Line for avg IMR
  geom_line(data = avg_infant_mortality_conflict, aes(x = year, y = conflict_count * scaling_factor, color = "Conflict Count"), size = 1) + # Line for conflict count
  scale_y_continuous(sec.axis = sec_axis(~./scaling_factor, name = "Conflict Count")) +
  labs(title = "Trends in Infant Mortality Rate and Conflict Count (2000-2019) - Sub-Saharan Africa",
       x = "Year", 
       y = "Average Infant Mortality Rate") +
  theme_minimal() +
  scale_color_manual(name = "", values = c("Infant Mortality Rate" = "blue", "Conflict Count" = "red")) + # Set colors for lines
  theme(legend.position = "top")




```

